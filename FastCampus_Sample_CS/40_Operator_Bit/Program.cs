using System;

/*-----------------------
 * NAME : 40_Operator_Bit
 * DESC : 
 ------------------------*/
namespace _Operator_Bit
{
    // 비트 연산자 장점
    // 불필요한 연산 최소화
    // 연산 속도가 빠름, 최적화
    // 연산하기 좋은 모양새를 가지고 있기 때문에 가능하다
    // 1byte -> 8bit
    class MainClass
    {
        public static void Main(string[] args)
        {
            int a = 15; // 0000 0000    0000 0000   0000 0000   0000 1111
            int b = 22; // 0000 0000    0000 0000   0000 0000   0001 0110
            int c = a & b; // 0000 0000    0000 0000   0000 0000   0000 0110 => 6
            Console.WriteLine("a & b : {0}", c);

                           // 0000 0000    0000 0000   0000 0000   0000 1111
                           // 0000 0000    0000 0000   0000 0000   0001 0110
            int d = a | b; // 0000 0000    0000 0000   0000 0000   0001 1111 => 31
            Console.WriteLine("a | b : {0}", d);

                           // 0000 0000    0000 0000   0000 0000   0000 1111
                           // 0000 0000    0000 0000   0000 0000   0001 0110
            int e = a ^ b; // 0000 0000    0000 0000   0000 0000   0001 1001 => 25
            Console.WriteLine("a ^ b : {0}", e);

                             // 0000 0000    0000 0000   0000 0000   0000 1111
            int f = a << 2;  // 0000 0000    0000 0000   0000 0000   0011 1100 => 60
            Console.WriteLine("a << 2 : {0}", f);
            Console.WriteLine("a << 1 : {0}", (a << 1)); // 왼쪽으로 1시프트 하면 2배로 증가(곱셈 연산)

                             // 0000 0000    0000 0000   0000 0000   0000 1111
                             // 0000 0000    0000 0000   0000 0000   0000 1111
            int g = 20 >> 2;
            Console.WriteLine("20 >> 2 : {0}", g);
            Console.WriteLine("(20 >> 1) : {0}", (20 >> 1)); // 오른쪽으로 1시프트 하면 2로 나눔(나눗셈 연산)

                        // 0000 0000    0000 0000   0000 0000   0001 0110 
            int h = ~b; // 1111 1111    1111 1111   1111 1111   1110 1001 => -23
            Console.WriteLine("h = ~b : {0},", h);

            // 0000 0000    0000 0000   0000 0000   0001 0110
            // 1111 1111    1111 1111   1111 1111   1110 1001 => -23
            // 1111 1111    1111 1111   1111 1111   1111 1010 => -6 (CPU에 따라 다른 결과)
            int i = (-b) >> 2;
            Console.WriteLine("i = (~b) >> 2 : {0}", i);

            // 비트로 출력하기
            // int a = 15;  // 0000 0000    0000 0000   0000 0000   0001 0110
            // int b = 22;  // 0000 0000    0000 0000   0000 0000   0000 0101 => 5
            string s = Convert.ToString(a, 2).PadLeft(32, '0');
            Console.WriteLine("s : {0}", s);
            s = Convert.ToString(b, 2).PadLeft(32, '0');
            Console.WriteLine("s : {0}", s);
        }
    }
}
